[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Zion’s Blog",
    "section": "",
    "text": "I put this together during Winter Quarter of 2024 for PIC 16B. Here I’m going to be placing all of my homework assignments, but I might also keep this for later use."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "haiiiiiiiii :3",
    "section": "",
    "text": "Hello! If you’re reading this page, that means that you’ve ended up at my Quarto Blog hosted on Github Pages for PIC16B with Professor Seyoon Ko!\n\nThis is not my dog (but I wish it was)."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/bruin/index.html",
    "href": "posts/bruin/index.html",
    "title": "Creating posts",
    "section": "",
    "text": "Here’s some text that I’ve placed underneath heading 1. Isn’t that great?\n\n\\[\\sin(x) = \\sum_{n=0}^{\\infty} \\frac{x^{2n+1}}{(2n+1)!}\\]\n\n\n\n\nTo do:\n\nEat dinner\nShower\n\n\n\n\nfor i in range(10):\n    print(i)"
  },
  {
    "objectID": "posts/bruin/index.html#heading-2",
    "href": "posts/bruin/index.html#heading-2",
    "title": "Creating posts",
    "section": "",
    "text": "for i in range(10):\n    print(i)"
  },
  {
    "objectID": "posts/Homework 0/index.html",
    "href": "posts/Homework 0/index.html",
    "title": "Homework 0: Penguins",
    "section": "",
    "text": "Introduction\nHello! In this post, I’ll show you how we can make a nice visualization of the famous “Palmer Penguins” dataset by using the Pandas, Matplotlib, and Seaborn packages in Python. First we need to start by importing the packages that we need and obtaining the data, which we luckily have access to in a .csv file provided by professor Ko.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nurl = \"https://raw.githubusercontent.com/pic16b-ucla/24W/main/datasets/palmer_penguins.csv\"\npenguins = pd.read_csv(url)\n\n\npenguins.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0708\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A1\nYes\n11/11/07\n39.1\n18.7\n181.0\n3750.0\nMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n11/11/07\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n11/16/07\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n3\nPAL0708\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A2\nYes\n11/16/07\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAdult not sampled.\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n11/16/07\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n\n\n\n\n\n\npenguins.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 344 entries, 0 to 343\nData columns (total 17 columns):\n #   Column               Non-Null Count  Dtype  \n---  ------               --------------  -----  \n 0   studyName            344 non-null    object \n 1   Sample Number        344 non-null    int64  \n 2   Species              344 non-null    object \n 3   Region               344 non-null    object \n 4   Island               344 non-null    object \n 5   Stage                344 non-null    object \n 6   Individual ID        344 non-null    object \n 7   Clutch Completion    344 non-null    object \n 8   Date Egg             344 non-null    object \n 9   Culmen Length (mm)   342 non-null    float64\n 10  Culmen Depth (mm)    342 non-null    float64\n 11  Flipper Length (mm)  342 non-null    float64\n 12  Body Mass (g)        342 non-null    float64\n 13  Sex                  334 non-null    object \n 14  Delta 15 N (o/oo)    330 non-null    float64\n 15  Delta 13 C (o/oo)    331 non-null    float64\n 16  Comments             26 non-null     object \ndtypes: float64(6), int64(1), object(10)\nmemory usage: 45.8+ KB\n\n\nWe see that we have 15 different variables, some of them being quantiative and others categorical. The 16th column of the data frame is called Comments and simply houses additional information about the specific penguins.\nWe also see that not all entries are present for every single penguin. Let’s see why this is:\n\npenguins[penguins.iloc[:,:-1].isnull().any(axis=1)].head() #See next markdown block for explanation.\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n0\nPAL0708\n1\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A1\nYes\n11/11/07\n39.1\n18.7\n181.0\n3750.0\nMALE\nNaN\nNaN\nNot enough blood for isotopes.\n\n\n3\nPAL0708\n4\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A2\nYes\n11/16/07\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nAdult not sampled.\n\n\n8\nPAL0708\n9\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN5A1\nYes\n11/9/07\n34.1\n18.1\n193.0\n3475.0\nNaN\nNaN\nNaN\nNo blood sample obtained.\n\n\n9\nPAL0708\n10\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN5A2\nYes\n11/9/07\n42.0\n20.2\n190.0\n4250.0\nNaN\n9.13362\n-25.09368\nNo blood sample obtained for sexing.\n\n\n10\nPAL0708\n11\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN6A1\nYes\n11/9/07\n37.8\n17.1\n186.0\n3300.0\nNaN\n8.63243\n-25.21315\nNo blood sample obtained for sexing.\n\n\n\n\n\n\n\n\npenguins[penguins.iloc[:,:-1].isnull().any(axis=1)]['Comments']\n\n0                         Not enough blood for isotopes.\n3                                     Adult not sampled.\n8                              No blood sample obtained.\n9                   No blood sample obtained for sexing.\n10                  No blood sample obtained for sexing.\n11                             No blood sample obtained.\n12                        Not enough blood for isotopes.\n13                        Not enough blood for isotopes.\n15                        Not enough blood for isotopes.\n39     Nest never observed with full clutch. Not enou...\n41                        Not enough blood for isotopes.\n46                        Not enough blood for isotopes.\n47     Sexing primers did not amplify. Not enough blo...\n212                                                  NaN\n246                                                  NaN\n250                                                  NaN\n286                                                  NaN\n324                                                  NaN\n339                                                  NaN\nName: Comments, dtype: object\n\n\nIn the above code, we first select all entries using iloc besides the last column (because this has comments). Then we run the .isnull() method which checks if a given entry is NaN (True or False). The .any(axis=1) method will simply change this to True if any of the entries in one row True as a result of the .isnull() method, and we use axis =1 to specify that we mean across columns for a given row.\nWe see that for many of these samples, not enough blood was drawn to obtain proper measurements. Let’s get rid of those entries that contain any null measurements.\n\npenguins2 = penguins[-penguins.iloc[:,:-1].isnull().any(axis=1)] #The minus sign negates the logical operation--that is, we only include entries where there are no null entries.\n\n\npenguins2[penguins2.iloc[:,:-1].isnull().any(axis=1)] #None left\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n\n\n\n\n\n\npenguins2.head()\n\n\n\n\n\n\n\n\nstudyName\nSample Number\nSpecies\nRegion\nIsland\nStage\nIndividual ID\nClutch Completion\nDate Egg\nCulmen Length (mm)\nCulmen Depth (mm)\nFlipper Length (mm)\nBody Mass (g)\nSex\nDelta 15 N (o/oo)\nDelta 13 C (o/oo)\nComments\n\n\n\n\n1\nPAL0708\n2\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN1A2\nYes\n11/11/07\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n8.94956\n-24.69454\nNaN\n\n\n2\nPAL0708\n3\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN2A1\nYes\n11/16/07\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n8.36821\n-25.33302\nNaN\n\n\n4\nPAL0708\n5\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A1\nYes\n11/16/07\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n8.76651\n-25.32426\nNaN\n\n\n5\nPAL0708\n6\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN3A2\nYes\n11/16/07\n39.3\n20.6\n190.0\n3650.0\nMALE\n8.66496\n-25.29805\nNaN\n\n\n6\nPAL0708\n7\nAdelie Penguin (Pygoscelis adeliae)\nAnvers\nTorgersen\nAdult, 1 Egg Stage\nN4A1\nNo\n11/15/07\n38.9\n17.8\n181.0\n3625.0\nFEMALE\n9.18718\n-25.21799\nNest never observed with full clutch.\n\n\n\n\n\n\n\nSo, what to do now? Many species exhibit what’s known as sexual dimorphism, wherein members of one sex have markedly distinct features from those of another. It wouldn’t necessarily be surprising to see, for example, females and males from one species to have a different average mass.\nHowever, it would be interesting to know if bodily proportions differ between sexes. For instance, males of one species might be larger and heavier than females, but if their bodies are of similar shape, then one would simply appear to be a smaller version of the other.\nTo this end, let’s compare the length of each penguin’s flipper to the length of it’s culmen. If you’re wondering what a culmen is, by the way…\n\n\n\nCredit to Allison Horst and Dr. Kristen Gorman on Twitter\n\n\nWe’ll start by eliminating any columns that we don’t want. For our purposes, we just want the Species (since proportions probably differ from one to the next), Stage (since at different points in their lifespan, penguins might have different shapes) Culmen Length (mm), Flipper Length (mm), and Sex.\n\npenguins3 = penguins2[['Species', 'Stage', 'Culmen Length (mm)', 'Flipper Length (mm)', 'Sex']] #Select the columns we want\npenguins3.head()\n\n\n\n\n\n\n\n\nSpecies\nStage\nCulmen Length (mm)\nFlipper Length (mm)\nSex\n\n\n\n\n1\nAdelie Penguin (Pygoscelis adeliae)\nAdult, 1 Egg Stage\n39.5\n186.0\nFEMALE\n\n\n2\nAdelie Penguin (Pygoscelis adeliae)\nAdult, 1 Egg Stage\n40.3\n195.0\nFEMALE\n\n\n4\nAdelie Penguin (Pygoscelis adeliae)\nAdult, 1 Egg Stage\n36.7\n193.0\nFEMALE\n\n\n5\nAdelie Penguin (Pygoscelis adeliae)\nAdult, 1 Egg Stage\n39.3\n190.0\nMALE\n\n\n6\nAdelie Penguin (Pygoscelis adeliae)\nAdult, 1 Egg Stage\n38.9\n181.0\nFEMALE\n\n\n\n\n\n\n\n\nset(penguins3['Stage']) #Coercing something into a sit displays its unique values.\n\n{'Adult, 1 Egg Stage'}\n\n\n\nset(penguins3['Species'])\n\n{'Adelie Penguin (Pygoscelis adeliae)',\n 'Chinstrap penguin (Pygoscelis antarctica)',\n 'Gentoo penguin (Pygoscelis papua)'}\n\n\nWe see that we have three distinct species of penguin, but only one stage (the 1 egg stage of adulthood), so we can eliminate this column.\n\npenguins3.columns\n\nIndex(['Species', 'Stage', 'Culmen Length (mm)', 'Flipper Length (mm)', 'Sex'], dtype='object')\n\n\n\npenguins3 = penguins3.drop('Stage', axis = 1)\n\nOkay, now we need to create a new column that contains the ratio of the flipper length to the culmen length.\n\npenguins3['Flipper-Culmen Ratio'] =  penguins3['Flipper Length (mm)'] / penguins3['Culmen Length (mm)']\n\n\npenguins3.head()\n\n\n\n\n\n\n\n\nSpecies\nCulmen Length (mm)\nFlipper Length (mm)\nSex\nFlipper-Culmen Ratio\n\n\n\n\n1\nAdelie Penguin (Pygoscelis adeliae)\n39.5\n186.0\nFEMALE\n4.708861\n\n\n2\nAdelie Penguin (Pygoscelis adeliae)\n40.3\n195.0\nFEMALE\n4.838710\n\n\n4\nAdelie Penguin (Pygoscelis adeliae)\n36.7\n193.0\nFEMALE\n5.258856\n\n\n5\nAdelie Penguin (Pygoscelis adeliae)\n39.3\n190.0\nMALE\n4.834606\n\n\n6\nAdelie Penguin (Pygoscelis adeliae)\n38.9\n181.0\nFEMALE\n4.652956\n\n\n\n\n\n\n\n\n\nVisualization\nNow that we have all of our column names in order, let us visualize our data properly. We’ll start by looking at Adelie Penguins.\n\npenguinsAdelie = penguins3[penguins3['Species'] == 'Adelie Penguin (Pygoscelis adeliae)']\n\n\nadelie_male = penguinsAdelie[penguinsAdelie['Sex'] == 'MALE']\nadelie_female = penguinsAdelie[penguinsAdelie['Sex'] == 'FEMALE']\n\n\nadelie_male.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 68 entries, 5 to 151\nData columns (total 5 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   Species               68 non-null     object \n 1   Culmen Length (mm)    68 non-null     float64\n 2   Flipper Length (mm)   68 non-null     float64\n 3   Sex                   68 non-null     object \n 4   Flipper-Culmen Ratio  68 non-null     float64\ndtypes: float64(3), object(2)\nmemory usage: 3.2+ KB\n\n\n\nadelie_female.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nIndex: 71 entries, 1 to 150\nData columns (total 5 columns):\n #   Column                Non-Null Count  Dtype  \n---  ------                --------------  -----  \n 0   Species               71 non-null     object \n 1   Culmen Length (mm)    71 non-null     float64\n 2   Flipper Length (mm)   71 non-null     float64\n 3   Sex                   71 non-null     object \n 4   Flipper-Culmen Ratio  71 non-null     float64\ndtypes: float64(3), object(2)\nmemory usage: 3.3+ KB\n\n\nFor this species, there is nearly an indetical number of members of either sex, which is important for our visualization.\nRecall from PIC16A that we can make an array of plots by using the subplots function from matplotlib. We’re going to first make an array of two empty plots, and then we’ll fill them with nearly identical histograms except for the fact that one contains the male data and the other the female data.\n\nfig, axes = plt.subplots(nrows=1, ncols=2, figsize=(10, 5)) #Because we have a 1-d grid of plots, axes will have a 1-d index\naxes[0].hist(adelie_male['Flipper-Culmen Ratio'], bins=10, edgecolor='black', color='red') #10 bins is probably fine if we have ~70 observations\naxes[0].set_title('Male Flipper-Culmen Ratio') #axes[0] refers to the first (left-most) graph\naxes[0].set_xlabel('Ratio')\naxes[0].set_ylabel('Frequency')\n\n\naxes[1].hist(adelie_female['Flipper-Culmen Ratio'], bins=10, edgecolor='black', color='green')\naxes[1].set_title('Female Flipper-Culmen Ratio')\naxes[1].set_xlabel('Ratio')\naxes[1].set_ylabel('Frequency')\n\nText(0, 0.5, 'Frequency')\n\n\n\n\n\n\n\n\n\nWe see that there may be somewhat of a difference–on average, the ratio for male penguins is lower than that of female ones. We can compare them side by side by using a box-plot. Matplotlib is convenient because it lets us put box-plots side by side by creating lists of data and labels, respectively.\n\nplt.figure()\nboxplot = plt.boxplot([adelie_male['Flipper-Culmen Ratio'],adelie_female['Flipper-Culmen Ratio']], labels = ['Male','Female'])\nplt.xlabel('Sex')\nplt.ylabel('Flipper-Cumen Ratio')\n\nText(0, 0.5, 'Flipper-Cumen Ratio')\n\n\n\n\n\n\n\n\n\nIt indeed looks like that, for a given culmen length, females have longer flippers! We can look at the numbers more in detail by returning to our table and using the describe() method alongside groupby (which allows us to apply functions individually to certain groups, sex in our case).\n\nround(penguinsAdelie.groupby('Sex')['Flipper-Culmen Ratio'].describe()[['min','25%','50%','75%','max']],2)\n\n\n\n\n\n\n\n\nmin\n25%\n50%\n75%\nmax\n\n\nSex\n\n\n\n\n\n\n\n\n\nFEMALE\n4.27\n4.86\n5.09\n5.29\n5.86\n\n\nMALE\n4.19\n4.61\n4.75\n4.94\n5.72\n\n\n\n\n\n\n\nAlright, now let’s apply what we’ve learned to all of the species included in the data set. We’ll actually start with the table of summary statistics above, except this time, we can group by both species and sex to create 6 total combinations. We’ll also include count since we don’t know if we have roughly similar numbers of each type of penguin:\n\nround(penguins3.groupby(['Species','Sex'])['Flipper-Culmen Ratio'].describe()[['count','min','25%','50%','75%','max']],2)\n\n\n\n\n\n\n\n\n\ncount\nmin\n25%\n50%\n75%\nmax\n\n\nSpecies\nSex\n\n\n\n\n\n\n\n\n\n\nAdelie Penguin (Pygoscelis adeliae)\nFEMALE\n71.0\n4.27\n4.86\n5.09\n5.29\n5.86\n\n\nMALE\n68.0\n4.19\n4.61\n4.75\n4.94\n5.72\n\n\nChinstrap penguin (Pygoscelis antarctica)\nFEMALE\n34.0\n3.12\n4.04\n4.14\n4.26\n4.64\n\n\nMALE\n33.0\n3.63\n3.81\n3.91\n3.98\n4.33\n\n\nGentoo penguin (Pygoscelis papua)\n.\n1.0\n4.88\n4.88\n4.88\n4.88\n4.88\n\n\nFEMALE\n58.0\n4.19\n4.54\n4.66\n4.80\n5.23\n\n\nMALE\n60.0\n3.86\n4.37\n4.48\n4.60\n4.93\n\n\n\n\n\n\n\nWe see there’s one member of the ‘Chinstrap penguin’ species whose sex is unspecified. Let’s remove that individual.\n\npenguins3[(penguins3['Flipper-Culmen Ratio'] &gt; 4.875) & (penguins3['Flipper-Culmen Ratio'] &lt; 4.885)]\n\n\n\n\n\n\n\n\nSpecies\nCulmen Length (mm)\nFlipper Length (mm)\nSex\nFlipper-Culmen Ratio\n\n\n\n\n89\nAdelie Penguin (Pygoscelis adeliae)\n38.9\n190.0\nFEMALE\n4.884319\n\n\n123\nAdelie Penguin (Pygoscelis adeliae)\n41.4\n202.0\nMALE\n4.879227\n\n\n251\nGentoo penguin (Pygoscelis papua)\n42.8\n209.0\nFEMALE\n4.883178\n\n\n336\nGentoo penguin (Pygoscelis papua)\n44.5\n217.0\n.\n4.876404\n\n\n\n\n\n\n\n\npenguins3 = penguins3.drop(336)\n\n\npenguin_summary = round(penguins3.groupby(['Species','Sex'])['Flipper-Culmen Ratio'].describe()[['count','min','25%','50%','75%','max']],2)\npenguin_summary\n\n\n\n\n\n\n\n\n\ncount\nmin\n25%\n50%\n75%\nmax\n\n\nSpecies\nSex\n\n\n\n\n\n\n\n\n\n\nAdelie Penguin (Pygoscelis adeliae)\nFEMALE\n71.0\n4.27\n4.86\n5.09\n5.29\n5.86\n\n\nMALE\n68.0\n4.19\n4.61\n4.75\n4.94\n5.72\n\n\nChinstrap penguin (Pygoscelis antarctica)\nFEMALE\n34.0\n3.12\n4.04\n4.14\n4.26\n4.64\n\n\nMALE\n33.0\n3.63\n3.81\n3.91\n3.98\n4.33\n\n\nGentoo penguin (Pygoscelis papua)\nFEMALE\n58.0\n4.19\n4.54\n4.66\n4.80\n5.23\n\n\nMALE\n60.0\n3.86\n4.37\n4.48\n4.60\n4.93\n\n\n\n\n\n\n\nWe see that we have fewer Chinstrap penguins in comparison to the other two species. At a first glance, it seems like the ratio is higher for females than males in all penguin species. Let’s try making box plots!\n\nplt.boxplot(penguins3.groupby([['','Sex']])['Flipper-Culmen Ratio'])\n\nValueError: Grouper and axis must be same length\n\n\nUh oh! This doesn’t work. We’re going to have to import the seaborn package, which interacts very well with matplotlib. (Thanks professor for demonstrating sns with lineplots in class!). For the documentation for boxplots, see the link below, but the syntax is quite simple as we just need to specify different groups (x), our variable of interest (y), and one more differentiation in the color (hue, which we set equal to sex):\nhttps://seaborn.pydata.org/generated/seaborn.boxplot.html\n\nimport seaborn as sns\n\n\nplt.figure()\nsns.boxplot(x='Species', y='Flipper-Culmen Ratio', hue='Sex', data=penguins3)\n\nplt.xticks(rotation=45, ha='center', fontsize = 7) #Needed because otherwise the names go on top of each other.\nplt.title('Ratio of Flipper to Culmen Length of Male and Female Penguins')\nplt.show()\n\n\n\n\n\n\n\n\nIndeed, for all of the species, it seems as if, on average, females have a greater flipper length to culmen length ratio. Wouldn’t it be great, though, if we could place some of those summary statistics that we saw earlier onto the plot itself?\n\npenguin_summary\n\n\n\n\n\n\n\n\n\ncount\nmin\n25%\n50%\n75%\nmax\n\n\nSpecies\nSex\n\n\n\n\n\n\n\n\n\n\nAdelie Penguin (Pygoscelis adeliae)\nFEMALE\n71.0\n4.27\n4.86\n5.09\n5.29\n5.86\n\n\nMALE\n68.0\n4.19\n4.61\n4.75\n4.94\n5.72\n\n\nChinstrap penguin (Pygoscelis antarctica)\nFEMALE\n34.0\n3.12\n4.04\n4.14\n4.26\n4.64\n\n\nMALE\n33.0\n3.63\n3.81\n3.91\n3.98\n4.33\n\n\nGentoo penguin (Pygoscelis papua)\nFEMALE\n58.0\n4.19\n4.54\n4.66\n4.80\n5.23\n\n\nMALE\n60.0\n3.86\n4.37\n4.48\n4.60\n4.93\n\n\n\n\n\n\n\nWe can use the plt.text() function to help us. I didn’t learn about this in PIC16A, but the syntax is very simple (see below for documentation). We need an x coordinate, a y coordinate, the text itself, and a color. The y coordinate is easily visible on our graph, but the x isn’t necessarily. In our case, the boxplots are centered around 0, 1, and 2. Below, for instance, is a plot where we show the median value of the ratio for female Chinstrap penguins.\n\nplt.figure()\nsns.boxplot(x='Species', y='Flipper-Culmen Ratio', hue='Sex', data=penguins3)\nplt.text(.7,4.14,'4.14', color = 'red') #x coordinate, y coordinate, text, color\nplt.xticks(rotation=45, ha='center', fontsize = 7) #Needed because otherwise the names go on top of each other.\nplt.title('Ratio of Flipper to Culmen Length of Male and Female Penguins')\nplt.show()\n\n\n\n\n\n\n\n\nWe can thus use a loop to do this for every single summary statistic for every single box plot. Let’s start by making a modified version of the summary table without the count variable:\n\npenguin_summary_mod = penguin_summary.drop(\"count\", axis=1)\npenguin_summary_mod\n\n\n\n\n\n\n\n\n\nmin\n25%\n50%\n75%\nmax\n\n\nSpecies\nSex\n\n\n\n\n\n\n\n\n\nAdelie Penguin (Pygoscelis adeliae)\nFEMALE\n4.27\n4.86\n5.09\n5.29\n5.86\n\n\nMALE\n4.19\n4.61\n4.75\n4.94\n5.72\n\n\nChinstrap penguin (Pygoscelis antarctica)\nFEMALE\n3.12\n4.04\n4.14\n4.26\n4.64\n\n\nMALE\n3.63\n3.81\n3.91\n3.98\n4.33\n\n\nGentoo penguin (Pygoscelis papua)\nFEMALE\n4.19\n4.54\n4.66\n4.80\n5.23\n\n\nMALE\n3.86\n4.37\n4.48\n4.60\n4.93\n\n\n\n\n\n\n\nTo use a loop, we need to make use of the .iloc method provided to Pandas data frames, which allows us to select the at a specific point in a table. We see above that penguin_summary_mod has 6 rows (6 species-sex combinations) and 5 columns (5 summary statistics). The first coordinate in iloc is the row index and the second is the column index.\nWe need to more explicitly set x coordinates due to the positioning of the box plots on the graph. Both the text and the y coordinates should correspond to the value of the summary statistic.\n\n\nplt.figure() #This delimits the end of the last figure and the beginning of this one\n\nbox = sns.boxplot(x='Species', y='Flipper-Culmen Ratio', hue='Sex',width = .7, data=penguins3 ) #I set width to .7 to make the boxes slightly skinnier\nx_coords = [-.25,0.1,.75,1.1,1.75,2.1] #By experimenting, I was able to see that an offset of -.25 and +.1, respectively, centered the text.\nfor i in range(6): #Iterates through the 6 x coordinates\n    for j in range(5): #Iterates through the 5 columns of penguin_summary_mod\n        plt.text(x_coords[i],penguin_summary_mod.iloc[i,j]+.02,penguin_summary_mod.iloc[i,j], color = 'lightgreen', fontsize = 8) #I add .02 so that the text does not intersect the whiskers/edges.\nbox.set_facecolor('gray')\nplt.xticks(rotation=45, ha='center', fontsize = 7) #Needed because otherwise the names go on top of each other.\nplt.title('Ratio of Flipper to Culmen Length of Male and Female Penguins')\nplt.show()\n\n\n\n\n\n\n\n\nAfter playing around with the functions and methods for a bit, I was able to come up with this chart, which I think looks pretty nice.\n\n\nThanks for looking at my post :3\n\n\n\nPusheen in the Tub"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ZionBlogPIC16B",
    "section": "",
    "text": "Homework 0: Penguins\n\n\n\n\n\n\nweek 1\n\n\nhomework 0\n\n\nhomework\n\n\n\n\n\n\n\n\n\nJan 17, 2024\n\n\nZion Gassner\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 9, 2024\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nhaiiiiiiiii :3\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 6, 2024\n\n\nZion Gassner\n\n\n\n\n\n\n\n\n\n\n\n\nCreating posts\n\n\n\n\n\n\nweek 0\n\n\nexample\n\n\n\n\n\n\n\n\n\nJan 17, 2023\n\n\nZion\n\n\n\n\n\n\nNo matching items"
  }
]